"""
AWS CDK Stack for the KratosNOVA project.
This stack defines the entire cloud infrastructure, including IAM roles,
DynamoDB tables, S3 buckets, Lambda functions, and API Gateway.
"""
from aws_cdk import (
    Stack,
    RemovalPolicy,
    aws_lambda as _lambda,
    aws_apigateway as apigw,
    aws_iam as iam,
    aws_dynamodb as dynamodb,
    aws_s3 as s3
)
from constructs import Construct


class KratosNovaStack(Stack):
    """
    Defines the main infrastructure stack for the KratosNOVA application.
    """
    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # =================================================================
        # ==================== S3 Bucket Definition ======================
        # =================================================================

        # S3 bucket for storing generated artifacts (images)
        artifacts_bucket = s3.Bucket(
            self, "ArtifactsBucket",
            # bucket_name is auto-generated by CDK for uniqueness, which is a best practice.
            removal_policy=RemovalPolicy.DESTROY,
            auto_delete_objects=True,
            block_public_access=s3.BlockPublicAccess.BLOCK_ALL,
            encryption=s3.BucketEncryption.S3_MANAGED,
            enforce_ssl=True,
        )

        # =================================================================
        # ==================== IAM Role Definition ========================
        # =================================================================

        # Create a single IAM Role for all Lambda functions in the project
        lambda_role = iam.Role(
            self, "KratosNovaLambdaRole",
            assumed_by=iam.ServicePrincipal("lambda.amazonaws.com"),
            description="Unified role for all KratosNOVA project Lambda functions"
        )

        # Grant the Lambda role read/write permissions to the S3 bucket
        artifacts_bucket.grant_read_write(lambda_role)

        # Add Bedrock Permissions (Invoke our specific models)
        lambda_role.add_to_policy(iam.PolicyStatement(
            actions=["bedrock:InvokeModel"],
            resources=[
                f"arn:aws:bedrock:{self.region}::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0",
                f"arn:aws:bedrock:{self.region}::foundation-model/anthropic.claude-3-haiku-20240307-v1:0",
                f"arn:aws:bedrock:{self.region}::foundation-model/stability.stable-image-core-v1:0"
            ],
            effect=iam.Effect.ALLOW
        ))

        # Add basic Lambda permissions for logging
        lambda_role.add_managed_policy(
            iam.ManagedPolicy.from_aws_managed_policy_name(
                "service-role/AWSLambdaBasicExecutionRole"
            )
        )

        # =================================================================
        # ==================== DynamoDB Table Definitions =================
        # =================================================================

        # 1. Contracts Table
        contracts_table = dynamodb.Table(
            self, "ContractsTable",
            partition_key=dynamodb.Attribute(
                name="contract_id", type=dynamodb.AttributeType.STRING
            ),
            billing_mode=dynamodb.BillingMode.PAY_PER_REQUEST,
            removal_policy=RemovalPolicy.DESTROY
        )

        # 2. Submissions Table
        submissions_table = dynamodb.Table(
            self, "SubmissionsTable",
            partition_key=dynamodb.Attribute(
                name="submission_id", type=dynamodb.AttributeType.STRING
            ),
            billing_mode=dynamodb.BillingMode.PAY_PER_REQUEST,
            removal_policy=RemovalPolicy.DESTROY
        )

        # 3. Agents Table
        agents_table = dynamodb.Table(
            self, "AgentsTable",
            partition_key=dynamodb.Attribute(
                name="agent_id", type=dynamodb.AttributeType.STRING
            ),
            billing_mode=dynamodb.BillingMode.PAY_PER_REQUEST,
            removal_policy=RemovalPolicy.DESTROY
        )
        
        # Grant the Lambda role read/write permissions to all our tables
        contracts_table.grant_read_write_data(lambda_role)
        submissions_table.grant_read_write_data(lambda_role)
        agents_table.grant_read_write_data(lambda_role)

        # =================================================================
        # ================== Lambda & API Gateway Definition ================
        # =================================================================

        # 1. Define the Lambda function, passing table names as environment variables
        hello_world_lambda = _lambda.Function(
            self, "HelloWorldFunction",
            runtime=_lambda.Runtime.PYTHON_3_11,
            handler="app.handler",
            code=_lambda.Code.from_asset("src/hello_world"),
            role=lambda_role,
            environment={
                "CONTRACTS_TABLE_NAME": contracts_table.table_name,
                "SUBMISSIONS_TABLE_NAME": submissions_table.table_name,
                "AGENTS_TABLE_NAME": agents_table.table_name,
                "ARTIFACTS_BUCKET_NAME": artifacts_bucket.bucket_name
            }
        )

        # 2. Define the API Gateway
        api = apigw.LambdaRestApi(
            self, "KratosNovaApi",
            handler=hello_world_lambda,
            proxy=False
        )

        # 3. Define the '/hello' resource and GET method
        hello_resource = api.root.add_resource("hello")
        hello_resource.add_method(
            "GET",
            apigw.LambdaIntegration(hello_world_lambda)
        )